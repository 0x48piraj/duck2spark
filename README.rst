======================================
 duck2spark by MaMe82 (Marcus Mengs)
======================================

This project provides a python Script capable of converting payloads generated by DuckEncoder_ to an Arduino Sketch source targeting DigiSpark.
The script solves two problems:

* Available solutions and tutorials emulating a RuberDucky on a DigiSpark suffer from poor keyboard layout support for non-US languages. This is solved by "outsourcing" this problem to DuckEncoder_
* Solutions using DigiKeyboard.print and DigiKeyboard.println suffer from string size destrictions, due to DigiSparks RAM limitations (less than 512 Bytes available). This is solved by storing the payload in FLASH memory

Additional features
-------------------

* Support for DuckScript "DELAY" and "REPEAT" command
* Option for initial delay, to cope with missing key presses, due to missing time for target to initialize drivers.
* Option to repeat payload execution (counted loop, single run, endless run)
* Option to blink status LED when payload execution is finished (on by default, except endless loop)

.. _DuckEncoder: https://github.com/hak5darren/USB-Rubber-Ducky/blob/master/Encoder/encoder.jar

Project files
=============

* duck2spark.py - Main script
* README.rst - this file
* example.sh - Example script building a payload by running DuckEncoder followed by duck2spark.py (encoder.jar has to be present)
* example.duck - RubberDucky script with test cases used by  example.sh

Requirements
============

* `Arduino IDE`_ to compile and upload the generated Sketch to DigiSpark
* Arduino IDE has to be configured to program a DigiSpark, following this guide_
* One, two or many DigiSparks ;-)
* DuckEncoder_ to generate a raw payload from DuckyScript
* Python 2 installation

.. _Arduino IDE: https://www.arduino.cc/en/main/software
.. _guide: https://digistump.com/wiki/digispark/tutorials/connecting
.. _DuckEncoder: https://github.com/hak5darren/USB-Rubber-Ducky/blob/master/Encoder/encoder.jar


Usage
=====

#. Generate a DuckyScript ``test.duck``you want to use as output::

	echo "STRING Hello World" > test.duck

#. Compile the script using DuckEncoder with your keyboard layout (de in example)::

	java -jar encoder.jar -i test.duck -o raw.bin -l de

#. Use duck2spark.py to convert into Arduino Sketch (options for single run, 2 seconds startup delay)::
	
	duck2spark.py -i raw.bin -l 1 -f 2000 -o sketch.c

#. After setting up the Arduino IDE load the example "DigisparkKeyboard" and replace the Sketch source by the one saved to sketch.c.

To get help on duck2spark.py run ``duck2spark.py -h``

Getting started with DuckyScript
--------------------------------

Here's an introduction_ to DuckyScript

.. _introduction: http://usbrubberducky.com/?duckyscript#!duckyscript.md
